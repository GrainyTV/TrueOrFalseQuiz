A kernel moduláris felépítése csökkenti a kernel futásidejú memóriafoglalását.;I
A mai operációs rendszer kernelek eseményvezérelt működésűek.;I
A kernel az első program, amit a háttértárról betöltve a processzor futtatni kezd.;H
A futási szint (runlevel) meghatározza a Unix rendszerek aktív szolgáltatásait.;I
Egy operációs rendszer forráskódja lehet néhány tízezer programsor, de akár sok millió is.;I
A rendszerkönyvtárak az operációs rendszer védett módban múködó részei.;H
A rendszerprogramok védett módban futnak.;H
A mai Windows változatok az NT kernelre épülnek.;I
A több feladatot egymás után megoldó kötegelt (batch) rendszerek után a feladatokat párhuzamosan futtató multiprogramozott OS-típusok jelentek meg.;I
A multiprogramozott operációs rendszer abban különbözik más rendszerektől, hogy többféle programozási nyelvet támogat.;H
Az operációs rendszer kernele felügyeli a felhasználói módban futó taszkok működését.;I
Az operációs rendszer elszeparálja (védi) egymástól a taszkokat, ezért azok védett módban futnak.;H
Az első szintű (RAM, MBR) betöltő már ismeri a fájlrendszerek felépítését, hiszen onnan tölti be a második szintű betöltőt.;H
Minden rendszerhívás védett módban hajtódik végre.;H
Az OS kernelek minden része (eljárása) védett módban működik.;H
Kooperatív ütemező esetén a taszkok nem hajtanak végre fut -> futásra kész állapotátmenetet.;H
A processzoraffinitás leginkább azért fontos kérdés, mivel többprocesszoros rendszerekben a végrehajtók utasításkészlet-architektúráját (ISA) figyelembe kell vennie az ütemezőnek.;H
A többszintű visszacsatolt sorok (MFQ) ütemező preemptív.;I
A kiéheztetés jelensége elvileg jelentkezhet legrövidebbet előre (SJF) ütemező esetén, és ott sehogyan sem kezelhető.;I
A laphiba azt jelenti, hogy az adott lap nem létezik sehol, ezért nem lehet rá hivatkozni.;H
Alapvetően védelmi mechanizmusok miatt szükséges cserehely (swap) alkalmazása, mivel az ott található adatokat a CPU direkt módon nem képes elérni.;H
A virtuális és fizikai memóriacímek futásidejű transzformációja alapvetően szoftveres úton történik.;H
A cserehelyre futó taszk programkódja sosem kerülhet, hiszen azt így a CPU nem tudná elérni.;H
A vergődés során a rendszer teljesítménye a gyakori laphibák miatt megnövekedő I/O-terhelés hatására romlik jelentősen.;I
A laphiba oka jellemzően az alkalmazás hibás viselkedése.;H
Ha növeljük egy rendszerben a fizikai memória méretét, akkor mindig csökkenni fog a laphibák száma, hiszen egyszerre több lapot tarthatunk bent a memóriában.;H
A rendszer túlterhelése esetén jelentkező vergődés rövidtávú ütemezéssel kezelhető.;H
A virtuális memóriakezelés a(z) tárbafagyasztás technikát alkalmazza a frissen behozott lapok (allokált keretek) felszabadításának megakadályozására.;I
A(z) előretekintő lapozás megpróbálja megjósolni, mely lapokra lesz szükség a közeljövőben, és azokat tölti be a fizikai memória kereteibe.;I
A virtuális tárkezelés során védelmi hiba generálódik, amikor a taszk olyan címet használ, amely számára nem engedélyezett.;I
A virtuális tárkezelés során semmilyen hiba nem generálódik, amikor a taszk egy eddig még sosem használt lapot olvasna.;H
A virtuális tárkezelés során semmilyen hiba nem generálódik, amikor a taszk az előbb végrehajtott utasítását újra megismétli.;I
Az időosztásos operációs rendszerek egyben multiprogramozott rendszerek is.;I
Az IEEE POSIX egy szabvány, amely előírja a kernel belső felépítését.;H
Egy operációs rendszer nem lehet egyszerre monolitikus és moduláris felépítésű.;H
Egy taszk létrehozása utáni első állapota lehet a "fut".;H
A várakozási idő a taszk várakozó állapotban eltöltött összes ideje.;H
A legrégebben várakozó (FCFS) ütemező preemptív.;H
A körforgó (RR) ütemező kooperatív, és elkerüli a kiéheztetést.;H
A Unix cron egy középtávú ütemező.;H
A keret- és a laptáblák száma megegyezik.;H
A cserehely a fizikai memória egy elszeparált része, ahol a nem futó taszkok adatait tároljuk.;H
A védelmi hiba egy taszk hibás címzésekor keletkezik, és szoftveres címleképezéssel kezelhető.;H
Szerver platformon a Linux operációs rendszer részesedése 10% alatti.;H
Egy taszk futásra kész állapotból várakozó állapotba is átkerülhet.;H
A számítógépeken futó taszkok többsége I/O-intenzív.;I
A folyamatokon belül csak egy verem lehet.;H
A mai operációs rendszerek jellemzően preemptív ütemezőt használnak.;I
A legrövidebb hátralevő löketidejű (SRTF) ütemező olyan prioritásos ütemezőnek is tekinthető, ahol a prioritás egyenlő a taszk hátralévő löketidejével, és a legkisebb értékkel rendelkező taszk fog futni.;I
A statikus többszintű ütemezőkben nem jelentkezhet a kiéheztetés, hiszen a globális ütemező preemptív.;H
A virtuális és fizikai címek összerendelése alapvetően hardveres úton, de időnként a kernel közreműködésével történik.;I
A laplopó (page daemon) valamilyen lapozási (lapbehozási) stratégiát alkalmaz.;H
A FreeBSD egy Linux disztribúció.;H
A Unix Wayland egy kompozíciós kijelzőszerver protokoll.;I
Az Apache webszerver szálalapú változata nagyobb teljesítményre képes, mint a folyamatalapú.;I
Többprocesszoros ütemezőkben a taszkokat nem célszerű szabadon migrálni a végrehajtó egységek között.;I
Előfordulhat, hogy különböző taszkokhoz tartozó, eltérő virtuális memóriacímek ugyanarra a fizikai címre képződnek le.;I
A laptáblában az érvényes(valid) bejegyzés azt jelenti, hogy az adat aktuális(legfrisebb) változata a fizikai memóriában található.;I
A kemény valósidejű rendszerek helyes működésük esetén 1 valószínűséggel szolgáltatnak eredményt a megadott időkereten belül.;I
Az időosztásos operációs rendszerek nem törekszenek azonos CPU-időt biztosítani a feladatok végrehajtására.;H
A kernel adatstruktúrák egy része a fájlrendszeri interfészen keresztül hozzáférhető Linux alatt.;I
Az ablakkezelő (window manager) a karakteres parancsértelmező (shell) grafikus változata.;H
A karakteres parancsértelmezőben két programot szeretne futtatni egymás után úgy, hogy az első kimenetét a második bemenetére irányítja. Szükséges-e ehhez a "|" karakter használata?;I
Többszintű prioritásos ütemezőben a különböző típusú taszkokat így érdemes elhelyezni: valósidejű -> I/O-intenzív -> CPU-intenzív.;I
A legrövidebb hátralevő löketidejű (SRTF) ütemező komplexitása lineáris.;I
A körforgó ütemező (RR) komplexitása konstans.;I
A prioritásos ütemező a prioritások teljes újraszámítása során négyzetes komplexitásúak.;I
A Unix operációs rendszer a fork() rendszerhívás során copy-on-write memóriakezelési teljesítménynövelő technikát alkalmaz.;I
Különálló folyamatokban található szálak is kommunikálhatnak egymással PRAM modell szerint az OS szolgáltatásait felhasználva.;I
A távoli eljáráshívás (RPC) egy szimmetrikus, üzenetalapú kommunikációs megoldás.;H
Olyan rendszerben, ahol nem alakulhat ki versenyhelyzet, nincs szükség szinkronizációra.;H
A logikai kötetkezelés (LVM) egyik alapvető célja, hogy növelje a maximális tárolórendszer‑méretet.;I
A Unix flock() egy ajánlott zárolási forma.;I
A FAT32 maximális fájlmérete 8 GiB.;H
A Unix fájlrendszerek metaadatait a superblock tartalmazza.;I
Az iSCSI (internet SCSI) fájlokon elvégzett műveletek hálózati átviteli protokollja.;H
A PRAM (pipelined RAM) modell írás-olvasás ütközésnél mindig először az írás műveletet hajtja végre, hogy az olvasás már az új értékkel térhessen vissza.;H
Üzenetváltásos kommunikációban a Küldés és a Fogadás szinkron műveletek.;H
Az üzenetsor egy indirekt kommunikációs megoldás.;I
A szinkronizáció általában rontja programjaink teljesítményét.;I
Sok olvasó és kevés író esetén a szemafor nem a legalkalmasabb szinkronizációs eszköz.;I
A termelő-fogyasztó probléma teljes megoldásához több különálló szinkronizációs eszköz szükséges.;I
A hálózati kommunikáció csak fizikai hálózati kapcsolat megléte esetén alkalmazható.;H
Optimista zárolás alkalmazásával minden esetben javítható a programunk teljesítménye.;H
A hálózati kommunikáció (socket) egy asszimetrikus kommunikációs forma.;I
A Unix operációs rendszer első változata az AT&T Bell Lab kommerciális termékeként jelent meg, amelyet számos cég és egyetem vásárolt meg.;
Egy taszk várakozási ideje a futásra kész állapotban eltöltött összes ideje.;H
Az ütemező átbocsájtó képessége a taszkok által időegység alatt átvitt adatok mennyisége.;H
A CPU a cserehelyen (swap) levő adatokhoz közvetlenül nem fér hozzá.;I
Lehetséges várakozásmentes I/O műveletek alkalmazása programjainkban.;I
Ajánlott zárolás (advisory locking) esetén az OS nem biztosít eszközöket a zárolás megvalósítására.;H
A szál a taszk egy olyan megvalósítása, amely önálló memóriaterülettel rendelkezik.;H
A többszintű visszacsatolt sorok (MFQ) ütemező lefelé lépteti a taszkokat a szintek között, ha azok az adott szinten kihasználják a rendelkezésükre álló CPU-időt (pl. a RR időszeletet).;I